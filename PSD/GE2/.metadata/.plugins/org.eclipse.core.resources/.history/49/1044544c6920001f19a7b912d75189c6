package dataStorageLayer;
import java.sql.*;
import java.util.List;
import java.util.ArrayList;

import applicationLayer.Borrower;
import applicationLayer.Keeper;
import applicationLayer.Privilege;
import applicationLayer.States;

public class BranchStorageInterface {
	private static BranchStorageInterface instance = null;
	private final static String database = "jdbc:sqlite:branchlib.db"; 
	private static Connection conn;
	
	/**
	 * Private Constructor
	 * @throws Exception
	 */
	private BranchStorageInterface() throws Exception {
		Class.forName("org.sqlite.JDBC");		
		conn = DriverManager.getConnection(database);
	}
	
	/**
	 * Get or create a branch Storage connection
	 * @return Singleton instance of the branch storage interface
	 * @throws Exception
	 */
	public static BranchStorageInterface getInstance() throws Exception {
		if (instance == null)
			instance = new BranchStorageInterface();
		return instance;
	}

	/**
	 * Return all books associated with a keeper
	 * @param userID
	 * @return a list of book id kept by the keeper
	 * @throws Exception
	 */
	public List<Integer> getBooksByKeeper(int userID) throws Exception {
	    
	    List<Integer> alb = new ArrayList<Integer>(); 
	    Statement stat = conn.createStatement();
	    ResultSet rs = stat.executeQuery("SELECT bookid FROM books WHERE keeperid=" + userID + ";");
	    while (rs.next()) {
	    	alb.add(rs.getInt("bookid"));
	    }
	    return alb;
	}
	
	
	public int getBookKeeper(int bookID) throws Exception {
	    Statement stat = conn.createStatement();
	    ResultSet rs = stat.executeQuery("SELECT keeperid FROM books WHERE bookid=" + bookID + ";");
	    rs.next();
	    rs.getInt("heeperid");
	    rs.close();
	}
	
	public void setBookKeeper(int bookID, Keeper k) throws Exception {
		Statement stat = conn.createStatement();
		ResultSet rs = stat.executeQuery("UPDATE books SET keeperid=" + k.getId() + " WHERE bookid=" + bookID + ";");
		rs.close();
	}
	
	public Borrower getBookBorrower(int bookID) throws ClassNotFoundException, SQLException
	{
	    Statement stat = conn.createStatement();
	    ResultSet rs = stat.executeQuery("SELECT userid FROM borrowedbooks WHERE bookid=" + bookID + ";");
	    int userid = rs.getInt("userid");
	    rs.close();
	    return null;
	}
	
	public void setBookBorrower(int bookID, Borrower b) throws Exception {
		Statement stat = conn.createStatement();
		ResultSet rs = stat.executeQuery("UPDATE books SET keeperid=" + b.getId() + " WHERE bookid=" + bookID + ";");
		rs.close();
	}
	
	public Privilege getUserPrivilege(int userID) throws ClassNotFoundException, SQLException
	{
	    Statement stat = conn.createStatement();
	    ResultSet rs = stat.executeQuery("SELECT privilege FROM users WHERE id=" + userID + ";");
	    while (rs.next()) {
	    	   switch (rs.getInt("privilege"))
			   {
				   case 0:
					   return Privilege.LIBRARIAN;
				   case 1:
					   return Privilege.USER;
				   case 2:
					   return Privilege.BORROWER;
				   case 3:
					   return Privilege.KEEPER;
				   case 4:
					   return Privilege.ADMINISTRATOR;
				   default:
					   return null;
			   }
	    }
	    rs.close();
	    return null;
	}
	
	public States getBookState(int bookID) throws SQLException, ClassNotFoundException
	{
		   Statement stat = conn.createStatement();
		   ResultSet rs = stat.executeQuery("SELECT state FROM books WHERE bookid=" + bookID + ";");
		   while (rs.next()) {
		
			   switch (rs.getInt("state"))
			   {
				   case 0:
					   return States.REQUESTRETURN;
				   case 1:
					   return States.LENT;
				   case 2:
					   return States.WITHKEEPER;
				   case 3:
					   return States.INTRANSITTOCENTRAL;
				   case 4:
					   return States.INTRANSITTOBRANCH;
				   case 5:
					   return States.INCENTRAL;
				   default:
					   return null;
			   }
			   
		   }
		   rs.close();
		   return null;
	}
	
	public List<Integer> getBookByState(States s) throws SQLException, ClassNotFoundException
	{
		   List<Integer> lbb = new ArrayList<Integer>();
		   Statement stat = conn.createStatement();
		   ResultSet rs = stat.executeQuery("SELECT bookID FROM books WHERE state=" + s + ";");
		   while(rs.next())
		   {
			   int bid = rs.getInt("bookID");
			   lbb.add(bid);	   
		   }
		   return lbb;
	}
	
	public List<Integer> getUsersByPrivilege(Privilege privilege) throws SQLException, ClassNotFoundException
	{
		List<Integer> li = new ArrayList<Integer>();
	    Statement stat = conn.createStatement();
	    ResultSet rs = stat.executeQuery("SELECT id FROM users WHERE privilege=" + privilege + " ORDER BY id ASC;");
	    while (rs.next()) {
	    	li.add(rs.getInt("id"));
	    }
	    rs.close();
	    return li;
	}
}
